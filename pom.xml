<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.6.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.in28minutes.rest.webservices</groupId>
	<artifactId>restful-web-services</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>restful-web-services</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>

		<!-- Remove version tag so SPRING will handle itself -->
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-hateoas -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		
		
		<!-- Convert object to XML instead of JSON object using Jackson -->
		<!-- Now you can ask the server to return your response in JSON or XML format -->
		<!-- Headers: Accept: application/xml , application/json -->
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml -->
		<dependency>
		    <groupId>com.fasterxml.jackson.dataformat</groupId>
		    <artifactId>jackson-dataformat-xml</artifactId>
		</dependency>

		<!-- This dependency is used to tell other devs about how to use this SPRING server -->
		<!-- Because RESTful services doesn't have standards of receiving and replying requests -->
		<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
		<dependency>
		    <groupId>io.springfox</groupId>
		    <artifactId>springfox-swagger2</artifactId>
		    <version>2.9.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
		<dependency>
		    <groupId>io.springfox</groupId>
		    <artifactId>springfox-swagger-ui</artifactId>
		    <version>2.9.2</version>
		</dependency>
		
		<!-- Spring Actuator is a monitoring libraries to check the traffic of our every single APIs -->
		<!-- Monitoring our app, gathering metrics, understanding traffic or the state of our database becomes trivial with this dependency. -->
		<!-- Monitor the APIs using the following link: -->
		<!-- http://localhost:8080/actuator -->
		<!-- http://localhost:8080/actuator/health -->
		<!-- http://localhost:8080/actuator/info -->
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
		<!-- Spring Data Rest HAL Browser -->
		<!-- Hypertext Application Language -->
		<!-- This library used to look at the APIs, recognizes links and allow us to browse those links from Spring Boot Actuator -->
		<!-- View Spring Boot Actuator in UI using this link: -->
		<!-- http://localhost:8080/browser/index.html#/ -->
		<!-- http://localhost:8080/actuator/beans -->
		<!-- http://localhost:8080/actuator/conditions -->
		<!-- http://localhost:8080/actuator/metrics -->
		<!-- http://localhost:8080/actuator/metrics/jvm.memory.used -->
		<!-- http://localhost:8080/actuator/httptrace : View the previous request that are executed in this app -->
		<!-- http://localhost:8080/actuator/mappings : Show all the mappings that are made to use URLs -->
		<!-- We can use HAL browser to go through Spring Boot Actuators -->
		<!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-rest-hal-browser -->
		<dependency>
		    <groupId>org.springframework.data</groupId>
		    <artifactId>spring-data-rest-hal-browser</artifactId>
		</dependency>
		
		<!-- Authentication with Spring Boot Security -->
		<!-- Every time you launch your server, it will log a temporary password so you can access the resource of your server -->
		<!-- Search something like this: Using generated security password: 0a6e327b-219e-487d-9afb-1f6953cba85a -->
		<!-- Go to Postman, set Authorization type to Basic Auth, set Username: user, and Password: *PASSWORD ABOVE* -->
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security -->
		<!-- For Spring JPA, temp. remove Security -->
<!-- 		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-security</artifactId>
		</dependency> -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
